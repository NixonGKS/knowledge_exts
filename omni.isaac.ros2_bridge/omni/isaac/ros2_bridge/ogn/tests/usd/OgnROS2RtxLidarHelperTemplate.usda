#usda 1.0
(
    doc ="""Generated from node description file OgnROS2RtxLidarHelper.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_ros2_bridge_ROS2RtxLidarHelper" (
        docs="""Handles automation of Lidar Sensor pipeline"""
    )
    {
        token node:type = "omni.isaac.ros2_bridge.ROS2RtxLidarHelper"
        int node:typeVersion = 1

        # 15 attributes
        custom uint64 inputs:context = 0 (
            docs="""ROS2 context handle, default of zero will use the global context"""
        )
        custom bool inputs:enabled = true (
            docs="""True to enable the lidar helper, False to disable"""
        )
        custom uint inputs:execIn (
            docs="""Triggering this causes the sensor pipeline to be generated"""
        )
        custom string inputs:frameId = "sim_lidar" (
            docs="""FrameID for the ROS2 message, the nodeNamespace will not be prefixed to the frame id"""
        )
        custom uint inputs:frameSkipCount = 0 (
            docs="""Specifies the number of simulation frames to skip between each message publish. (e.g. Set to 0 to publish each frame. Set 1 to publish every other frame)"""
        )
        custom bool inputs:fullScan = false (
            docs="""If True publish a full scan when enough data has accumulated instead of partial scans each frame. Supports point cloud type only"""
        )
        custom string inputs:nodeNamespace = "" (
            docs="""Namespace of ROS2 Node, prepends and published/subscribed topic by the node namespace"""
        )
        custom string inputs:qosProfile = "" (
            docs="""QoS profile config"""
        )
        custom uint64 inputs:queueSize = 10 (
            docs="""Number of message to queue up before throwing away, in case messages are collected faster than they can be sent. Only honored if 'history' QoS policy was set to 'keep last'. This setting can be overwritten by qosProfile input."""
        )
        custom token inputs:renderProductPath = "" (
            docs="""Name of the render product path to publish lidar data"""
        )
        custom bool inputs:resetSimulationTimeOnStop = false (
            docs="""If True the simulation time will reset when stop is pressed, False means time increases monotonically. This setting is ignored if useSystemTime is enabled."""
        )
        custom bool inputs:showDebugView = false (
            docs="""If True a debug view of the lidar particles will appear in the scene."""
        )
        custom string inputs:topicName = "scan" (
            docs="""Topic name for sensor data"""
        )
        custom token inputs:type = "laser_scan" (
            docs="""Data to publish from node"""
        )
        custom bool inputs:useSystemTime = false (
            docs="""If True, system timestamp will be included in messages. If False, simulation timestamp will be included in messages"""
        )
    }
}
