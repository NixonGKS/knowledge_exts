#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacComputeRTXRadarPointCloud.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_sensor_IsaacComputeRTXRadarPointCloud" (
        docs="""This node reads from the an RTX Radar sensor and holds point cloud data buffers"""
    )
    {
        token node:type = "omni.isaac.sensor.IsaacComputeRTXRadarPointCloud"
        int node:typeVersion = 1

        # 3 attributes
        custom uint64 inputs:dataPtr = 0 (
            docs="""Pointer to Radar render result."""
        )
        custom uint inputs:exec (
            docs="""The input execution port"""
        )
        custom token inputs:renderProductPath = "" (
            docs="""Path of the renderProduct to wait for being rendered"""
        )

        # 27 attributes
        custom float[] outputs:azimuth = [] (
            docs="""Azimuth angle (radians)"""
        )
        custom uint64 outputs:bufferSize (
            docs="""Size (in bytes) of the buffer (0 if the input is a texture)"""
        )
        custom int outputs:cudaDeviceIndex = -1 (
            docs="""Index of the device where the data lives (-1 for host data)"""
        )
        custom uint64 outputs:cycleCnt (
            docs="""Scan cycle count"""
        )
        custom uint64 outputs:dataPtr (
            docs="""Buffer of 3d points containing point cloud data in Radar coordinates"""
        )
        custom float[] outputs:elevation = [] (
            docs="""Angle of elevation (radians)"""
        )
        custom uint outputs:exec (
            docs="""Output execution triggers when Radar sensor has data"""
        )
        custom uint outputs:height = 1 (
            docs="""Height of point cloud buffer, will always return 1"""
        )
        custom uint[] outputs:materialId = [] (
            docs="""material ID"""
        )
        custom float outputs:maxAzRad (
            docs="""The max unambiguous azimuth for the scan"""
        )
        custom float outputs:maxElRad (
            docs="""The max unambiguous elevation for the scan"""
        )
        custom float outputs:maxRangeM (
            docs="""The max unambiguous range for the scan"""
        )
        custom float outputs:maxVelMps (
            docs="""The max unambiguous velocity for the scan"""
        )
        custom float outputs:minAzRad (
            docs="""The min unambiguous azimuth for the scan"""
        )
        custom float outputs:minElRad (
            docs="""The min unambiguous elevation for the scan"""
        )
        custom float outputs:minVelMps (
            docs="""The min unambiguous velocity for the scan"""
        )
        custom uint outputs:numDetections (
            docs="""The number of valid detections in the array"""
        )
        custom uint[] outputs:objectId = [] (
            docs="""object ID"""
        )
        custom float[] outputs:radialDistance = [] (
            docs="""Radial distance (m)"""
        )
        custom float[] outputs:radialVelocity = [] (
            docs="""Radial velocity (m/s)"""
        )
        custom float[] outputs:rcs = [] (
            docs="""Radar cross section in decibels referenced to a square meter (dBsm)"""
        )
        custom uchar outputs:scanIdx (
            docs="""Scan index for sensors with multi scan support"""
        )
        custom uint[] outputs:semanticId = [] (
            docs="""semantic ID"""
        )
        custom uchar outputs:sensorID (
            docs="""Sensor Id for sensor that generated the scan"""
        )
        custom uint64 outputs:timeStampNS (
            docs="""Scan timestamp in nanoseconds"""
        )
        custom matrix4d outputs:transform (
            docs="""The input matrix transformed from Radar to World"""
        )
        custom uint outputs:width = 0 (
            docs="""3 x Width or number of points in point cloud buffer"""
        )
    }
}
