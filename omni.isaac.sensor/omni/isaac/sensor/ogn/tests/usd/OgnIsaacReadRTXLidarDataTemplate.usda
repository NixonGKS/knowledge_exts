#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacReadRTXLidarData.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_sensor_IsaacReadRTXLidarData" (
        docs="""This node reads the data straight from the an RTX Lidar sensor."""
    )
    {
        token node:type = "omni.isaac.sensor.IsaacReadRTXLidarData"
        int node:typeVersion = 1

        # 7 attributes
        custom uint64 inputs:bufferSize = 0 (
            docs="""number of bytes in dataPtr"""
        )
        custom int inputs:cudaDeviceIndex = -1 (
            docs="""Index of the device where the data lives (-1 for host data)"""
        )
        custom uint64 inputs:cudaStream = 0 (
            docs="""Cuda Stream dataPtr is on if cudaDeviceIndex > -1"""
        )
        custom uint64 inputs:dataPtr = 0 (
            docs="""Pointer to LiDAR render result."""
        )
        custom uint inputs:exec (
            docs="""The input execution port"""
        )
        custom bool inputs:keepOnlyPositiveDistance = false (
            docs="""Keep points only if the return distance is > 0"""
        )
        custom token inputs:renderProductPath = "" (
            docs="""Config is gotten from this"""
        )

        # 22 attributes
        custom float[] outputs:azimuths = [] (
            docs="""azimuth in deg [0, 360)"""
        )
        custom uint[] outputs:channels = [] (
            docs="""channel of point"""
        )
        custom uint[] outputs:deltaTimes = [] (
            docs="""delta time in ns from the head (relative to tick timestamp)"""
        )
        custom float2 outputs:depthRange = (0, 0) (
            docs="""The min and max range for sensor to detect a hit [min, max]"""
        )
        custom float[] outputs:distances = [] (
            docs="""distance in m"""
        )
        custom uchar[] outputs:echos = [] (
            docs="""echo id in ascending order"""
        )
        custom float[] outputs:elevations = [] (
            docs="""elevation in deg [-90, 90]"""
        )
        custom uint[] outputs:emitterIds = [] (
            docs="""beam/laser detector id"""
        )
        custom uint outputs:exec (
            docs="""Output execution triggers when lidar sensor has data"""
        )
        custom uchar[] outputs:flags = [] (
            docs="""flags"""
        )
        custom uint64 outputs:frameId = 0 (
            docs="""The frameId of the current render"""
        )
        custom point3f[] outputs:hitPointNormals = [] (
            docs="""hit point Normal"""
        )
        custom float[] outputs:intensities = [] (
            docs="""intensity [0,1]"""
        )
        custom uint[] outputs:materialIds = [] (
            docs="""hit point material id"""
        )
        custom uint64 outputs:numBeams = 0 (
            docs="""The number of lidar beams being output"""
        )
        custom uint[] outputs:objectIds = [] (
            docs="""hit point object id"""
        )
        custom uchar[] outputs:tickStates = [] (
            docs="""emitter state the tick belongs to"""
        )
        custom uint[] outputs:ticks = [] (
            docs="""tick of point"""
        )
        custom uint64 outputs:timestampNs = 0 (
            docs="""The time in nanoseconds of the start of frame"""
        )
        custom matrix4d outputs:transform (
            docs="""The transform matrix from lidar to world coordinates at the end of the frame"""
        )
        custom matrix4d outputs:transformStart (
            docs="""The transform matrix from lidar to world coordinates at the start of the frame"""
        )
        custom point3f[] outputs:velocities = [] (
            docs="""velocity at hit point in sensor coordinates [m/s]"""
        )
    }
}
