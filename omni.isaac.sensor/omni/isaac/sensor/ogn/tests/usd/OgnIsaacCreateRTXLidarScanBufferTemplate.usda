#usda 1.0
(
    doc ="""Generated from node description file OgnIsaacCreateRTXLidarScanBuffer.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_sensor_IsaacCreateRTXLidarScanBuffer" (
        docs="""This node creates a full scan buffer for RTX Lidar sensor."""
    )
    {
        token node:type = "omni.isaac.sensor.IsaacCreateRTXLidarScanBuffer"
        int node:typeVersion = 1

        # 20 attributes
        custom float inputs:accuracyErrorAzimuthDeg = 0.0 (
            docs="""Accuracy error of azimuth in degrees applied to all points equally"""
        )
        custom float inputs:accuracyErrorElevationDeg = 0.0 (
            docs="""Accuracy error of elevation in degrees applied to all points equally"""
        )
        custom float3 inputs:accuracyErrorPosition = (0.0, 0.0, 0.0) (
            docs="""Position offset applied to all points equally"""
        )
        custom int inputs:cudaDeviceIndex = -1 (
            docs="""Index of the device where the data lives (-1 for host data)"""
        )
        custom uint64 inputs:dataPtr = 0 (
            docs="""Pointer to LiDAR render result."""
        )
        custom uint inputs:exec (
            docs="""The input execution port"""
        )
        custom bool inputs:keepOnlyPositiveDistance = true (
            docs="""Keep points only if the return distance is > 0"""
        )
        custom bool inputs:outputAzimuth = false (
            docs="""Create an output array for the Azimuth."""
        )
        custom bool inputs:outputBeamId = false (
            docs="""Create an output array for the BeamId."""
        )
        custom bool inputs:outputDistance = true (
            docs="""Create an output array for the Distance."""
        )
        custom bool inputs:outputElevation = false (
            docs="""Create an output array for the Elevation."""
        )
        custom bool inputs:outputEmitterId = false (
            docs="""Create an output array for the EmitterId."""
        )
        custom bool inputs:outputIntensity = true (
            docs="""Create an output array for the Intensity."""
        )
        custom bool inputs:outputMaterialId = false (
            docs="""Create an output array for the MaterialId."""
        )
        custom bool inputs:outputNormal = false (
            docs="""Create an output array for the Normals."""
        )
        custom bool inputs:outputObjectId = false (
            docs="""Create an output array for the ObjectId."""
        )
        custom bool inputs:outputTimestamp = false (
            docs="""Create an output array for the Timestamp."""
        )
        custom bool inputs:outputVelocity = false (
            docs="""Create an output array for the Velocity."""
        )
        custom token inputs:renderProductPath = "" (
            docs="""Config is gotten from this"""
        )
        custom bool inputs:transformPoints = false (
            docs="""Transform point cloud to world coordinates"""
        )

        # 48 attributes
        custom uint64 outputs:azimuthBufferSize (
            docs="""size"""
        )
        custom float outputs:azimuthDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:azimuthPtr (
            docs="""azimuth in rad [-pi,pi]"""
        )
        custom uint64 outputs:beamIdBufferSize (
            docs="""size"""
        )
        custom uint outputs:beamIdDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:beamIdPtr (
            docs="""beamId"""
        )
        custom uint64 outputs:bufferSize (
            docs="""Size (in bytes) of the buffer (0 if the input is a texture)"""
        )
        custom int outputs:cudaDeviceIndex = -1 (
            docs="""Index of the device where the data lives (-1 for host data)"""
        )
        custom uint64 outputs:dataPtr (
            docs="""Pointer to LiDAR render result."""
        )
        custom uint64 outputs:distanceBufferSize (
            docs="""size"""
        )
        custom float outputs:distanceDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:distancePtr (
            docs="""range in m"""
        )
        custom uint64 outputs:elevationBufferSize (
            docs="""size"""
        )
        custom float outputs:elevationDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:elevationPtr (
            docs="""elevation in rad [-pi/2, pi/2]"""
        )
        custom uint64 outputs:emitterIdBufferSize (
            docs="""size"""
        )
        custom uint outputs:emitterIdDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:emitterIdPtr (
            docs="""emitterId"""
        )
        custom uint outputs:exec (
            docs="""Output execution triggers when lidar sensor has data"""
        )
        custom uint outputs:height = 1 (
            docs="""Height of point cloud buffer, will always return 1"""
        )
        custom uint64 outputs:indexBufferSize (
            docs="""size"""
        )
        custom uint outputs:indexDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:indexPtr (
            docs="""Index into the full array if keepOnlyPositiveDistance ((startTick+tick)*numChannels*numEchos + channel*numEchos + echo)"""
        )
        custom uint64 outputs:intensityBufferSize (
            docs="""size"""
        )
        custom float outputs:intensityDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:intensityPtr (
            docs="""intensity [0,1]"""
        )
        custom uint64 outputs:materialIdBufferSize (
            docs="""size"""
        )
        custom uint outputs:materialIdDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:materialIdPtr (
            docs="""materialId at hit location"""
        )
        custom uint64 outputs:normalBufferSize (
            docs="""size"""
        )
        custom float3 outputs:normalDataType = (4, 0, 0) (
            docs="""type"""
        )
        custom uint64 outputs:normalPtr (
            docs="""Normal at the hit location"""
        )
        custom uint outputs:numChannels (
            docs="""Number of channels of the lidar"""
        )
        custom uint outputs:numEchos (
            docs="""Number of echos of the lidar"""
        )
        custom uint outputs:numReturnsPerScan (
            docs="""Number of returns in the full scan"""
        )
        custom uint64 outputs:objectIdBufferSize (
            docs="""size"""
        )
        custom uint outputs:objectIdDataType = 4 (
            docs="""type"""
        )
        custom uint64 outputs:objectIdPtr (
            docs="""ObjectId for getting usd prim information"""
        )
        custom token outputs:renderProductPath (
            docs="""Config is gotten from this"""
        )
        custom uint outputs:ticksPerScan (
            docs="""Number of ticks in a full scan"""
        )
        custom uint64 outputs:timestampBufferSize (
            docs="""size"""
        )
        custom uint64 outputs:timestampDataType = 8 (
            docs="""type"""
        )
        custom uint64 outputs:timestampPtr (
            docs="""timestamp in ns"""
        )
        custom matrix4d outputs:transform (
            docs="""The transform matrix from lidar to world coordinates"""
        )
        custom uint64 outputs:velocityBufferSize (
            docs="""size"""
        )
        custom float3 outputs:velocityDataType = (4, 0, 0) (
            docs="""type"""
        )
        custom uint64 outputs:velocityPtr (
            docs="""elevation in rad [-pi/2, pi/2]"""
        )
        custom uint outputs:width = 0 (
            docs="""3 x Width or number of points in point cloud buffer"""
        )
    }
}
